#-------------------------------------------------------------------------------
# project name:  Boxcycler Builds
# file name:     ks69-dt.cfg
# author:        Steve Vasta
# created:       May 31, 2018
# modified:      June 4, 2018
# description:   A Red Hat Enterprise Linux (RHEL) 6.x kickstart file.
#                This file is used to build a RHEL 6.x desktop system
#                with configuration options of my choosing.

#-------------------------------------------------------------------------------
# You definately want to set one of the following.
rootpw vagrant
bootloader --location=mbr --password=vagrant --append="no_timer_check console=tty0 console=ttyS0,115200 net.ifnames=0 biosdevname=0"

#-------------------------------------------------------------------------------
# Point to a local installation server, or use "cdrom"
text
cdrom

#-------------------------------------------------------------------------------
# Partitioning
zerombr
clearpart --all --initlabel --drives=sda
part /boot --fstype ext2 --size 1024
part pv.01 --size=40960 --grow --ondisk=sda --maxsize=128000
volgroup vg00 pv.01
logvol /     --name=root --vgname=vg00 --fstype=ext4  --size=4096 --grow --maxsize=8192
logvol /usr  --name=usr  --vgname=vg00 --fstype=ext4  --size=4096 --grow --maxsize=8192
logvol /var  --name=var  --vgname=vg00 --fstype=ext4  --size=4096 --grow --maxsize=8192
logvol /home --name=home --vgname=vg00 --fstype=ext4  --size=4096 --grow
logvol swap  --name=swap --vgname=vg00 --fstype=swap --size=4096 --grow --maxsize=8192

#-------------------------------------------------------------------------------
# Network Configuration
#   - the following is for the "recommended solution" outlined in the
#   - Red Hat Academy Instructor's Guide
# network --bootproto=static --ip=192.168.0.254 --netmask=255.255.255.0 --device=eth0
network --device eth0 --bootproto=dhcp
firewall --disabled

#-------------------------------------------------------------------------------
# Environment
lang en_US.UTF-8
timezone --utc America/Los_Angeles

#-------------------------------------------------------------------------------
# Hardware
keyboard us
unsupported_hardware

#-------------------------------------------------------------------------------
# Misc
authconfig --enableshadow --enablemd5
auth --useshadow --enablemd5
poweroff
install

#-------------------------------------------------------------------------------
# SELinux
#selinux --enforcing
selinux --permissive
#selinux --disabled

#-------------------------------------------------------------------------------
# Add user(s)
user --name=vagrant --plaintext --password vagrant

#-------------------------------------------------------------------------------
# Optional settings
firstboot --disabled
xconfig  --startxonboot --defaultdesktop=gnome

#-------------------------------------------------------------------------------
# Software
%packages --ignoremissing --excludedocs
@Base
@Core
@Development Tools
@debugging
@directory-client
@java-platform
@network-file-system-client
@print-client
@basic-desktop
@desktop-debugging
@desktop-platform
@fonts
@general-desktop
@graphical-admin-tools
@input-methods
@legacy-x
@remote-desktop-clients
@x11
@server-platform
@internet-applications
@internet-browser
@office-suite

#-------------------------------------------------------------------------------
# vagrant needs this to copy initial files via scp
openssh-clients
openssh-server

#-------------------------------------------------------------------------------
# Prerequisites for installing VMware Tools or VirtualBox guest additions.
# Put in kickstart to ensure first version installed is from install disk,
# not latest from a mirror.
kernel-headers
kernel-devel
gcc
make
perl
curl
wget
bzip2
dkms
patch
net-tools

#-------------------------------------------------------------------------------
# SE Linux
policycoreutils
selinux-policy
selinux-policy-targeted
libselinux
libselinux-utils
libselinux-python

#-------------------------------------------------------------------------------
# Other stuff
sudo
nfs-utils
ntp
ntpdate
redhat-lsb
bind-utils
-vim-minimal
vim-common
vim-enhanced
screen
yum-utils
git

#-------------------------------------------------------------------------------
# My stuff . . .  :-)
firefox
thunderbird

#-------------------------------------------------------------------------------
# Microcode updates cannot work in a VM
-microcode_ctl

#-------------------------------------------------------------------------------
# unnecessary firmware
-aic94xx-firmware
-alsa-firmware
-alsa-tools-firmware
-atmel-firmware
-b43-openfwwf
-bfa-firmware
-ipw*-firmware
-irqbalance
-ivtv-firmware
-iwl*-firmware
-kernel-firmware
-libertas-usb8388-firmware
-ql*-firmware
-rt61pci-firmware
-rt73usb-firmware
-xorg-x11-drv-ati-firmware
-zd1211-firmware
# Don't build rescue initramfs
-dracut-config-rescue
%end

#-------------------------------------------------------------------------------
# Post Script - the following script runs on the newly installed machine,
# immediately after installation.
%post

#-------------------------------------------------------------------------------
# configure vagrant user in file "/etc/sudoers.d/vagrant"
if [ ! -d /etc/sudoers.d ]; then
  mkdir /etc/sudoers.d
  chmod 0750 /etc/sudoers.d
fi
touch /etc/sudoers.d/vagrant
echo "# add vagrant user" >> /etc/sudoers.d/vagrant
echo "%vagrant ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers.d/vagrant
chmod 0440 /etc/sudoers.d/vagrant
cp /etc/sudoers /etc/sudoers.orig
sed -i "s/^\(.*requiretty\)$/#\1/" /etc/sudoers

mkdir -pm 700 /home/vagrant/.ssh
echo "ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key" > /home/vagrant/.ssh/authorized_keys
chmod 0600 /home/vagrant/.ssh/authorized_keys
chown -R vagrant:vagrant /home/vagrant/.ssh

#-------------------------------------------------------------------------------
# keep proxy settings through sudo
echo 'Defaults env_keep += "HTTP_PROXY HTTPS_PROXY FTP_PROXY RSYNC_PROXY NO_PROXY"' >> /etc/sudoers
echo " " >> /etc/sudoers
echo "#includedir /etc/sudoers.d" >> /etc/sudoers

#-------------------------------------------------------------------------------
# Apply slow DNS fix . . .
echo 'RES_OPTIONS="single-request-reopen"' >> /etc/sysconfig/network

#-------------------------------------------------------------------------------
# Configuring sshd_config options . . .
echo '==> Turning off sshd DNS lookup to prevent timeout delay'
echo "UseDNS no" >> /etc/ssh/sshd_config
echo '==> Disablng GSSAPI authentication to prevent timeout delay'
echo "GSSAPIAuthentication no" >> /etc/ssh/sshd_config

#-------------------------------------------------------------------------------
# Install VirtualBox Guest Additions . . .
mount /dev/sr1 /mnt
sh /mnt/VBoxLinuxAdditions.run
umount /mnt

#-------------------------------------------------------------------------------
# MOTD . . .
echo "==> Recording box generation date"
date > /etc/vagrant_box_build_date

echo "==> Customizing message of the day"
MOTD_FILE=/etc/motd
BANNER_WIDTH=64
PLATFORM_RELEASE=$(sed 's/^.\+ release \([.0-9]\+\).*/\1/' /etc/redhat-release)
PLATFORM_MSG=$(printf 'RHEL Server release %s (Maipo)' "$PLATFORM_RELEASE")
BUILT_MSG=$(printf 'built %s' $(date +%Y-%m-%d))
printf '%0.1s' "-"{1..64} > ${MOTD_FILE}
printf '\n' >> ${MOTD_FILE}
printf '%2s%-30s%30s\n' " " "${PLATFORM_MSG}" "${BUILT_MSG}" >> ${MOTD_FILE}
printf '%0.1s' "-"{1..64} >> ${MOTD_FILE}
printf '\n' >> ${MOTD_FILE}

#-------------------------------------------------------------------------------
# Cleanup this machine image . . .
echo "==> Clear out machine id"
rm -f /etc/machine-id
touch /etc/machine-id

echo "==> Cleaning up temporary network addresses"
# Make sure udev doesn't block our network
# http://6.ptmc.org/?p=1649
rm -f /etc/udev/rules.d/70-persistent-net.rules
mkdir /etc/udev/rules.d/70-persistent-net.rules

for ndev in `ls -1 /etc/sysconfig/network-scripts/ifcfg-*`; do
if [ "`basename $ndev`" != "ifcfg-lo" ]; then
    sed -i '/^HWADDR/d' "$ndev";
    sed -i '/^UUID/d' "$ndev";
fi
done

#-------------------------------------------------------------------------------
# Better fix that persists package updates: http://serverfault.com/a/485689
touch /etc/udev/rules.d/75-persistent-net-generator.rules
for ndev in `ls -1 /etc/sysconfig/network-scripts/ifcfg-*`; do
    if [ "`basename $ndev`" != "ifcfg-lo" ]; then
        sed -i '/^HWADDR/d' "$ndev";
        sed -i '/^UUID/d' "$ndev";
    fi
done
rm -rf /dev/.udev/

#-------------------------------------------------------------------------------
# Start the disk cleanup procedure . . .

DISK_USAGE_BEFORE_CLEANUP=$(df -h)

echo "==> Clean up yum cache of metadata and packages to save space"
yum -y --enablerepo='*' clean all

echo "==> Removing temporary files used to build box"
rm -rf /tmp/*

echo "==> Rebuild RPM DB"
rpmdb --rebuilddb
rm -f /var/lib/rpm/__db*

# delete any logs that have built up during the install
find /var/log/ -name *.log -exec rm -f {} \;

echo '==> Clear out swap and disable until reboot'
set +e
swapuuid=$(/sbin/blkid -o value -l -s UUID -t TYPE=swap)
case "$?" in
        2|0) ;;
        *) exit 1 ;;
esac
set -e
if [ "x${swapuuid}" != "x" ]; then
    # Whiteout the swap partition to reduce box size
    # Swap is disabled till reboot
    swappart=$(readlink -f /dev/disk/by-uuid/$swapuuid)
    /sbin/swapoff "${swappart}"
    dd if=/dev/zero of="${swappart}" bs=1M || echo "dd exit code $? is suppressed"
    /sbin/mkswap -U "${swapuuid}" "${swappart}"
fi

echo '==> Zeroing out empty area to save space in the final image'
# Zero out the free space to save space in the final image.
# Contiguous zeroed space compresses down to nothing.
dd if=/dev/zero of=/EMPTY bs=1M || echo "dd exit code $? is suppressed"
rm -f /EMPTY
dd if=/dev/zero of=/usr/EMPTY bs=1M || echo "dd exit code $? is suppressed"
rm -f /usr/EMPTY
dd if=/dev/zero of=/var/EMPTY bs=1M || echo "dd exit code $? is suppressed"
rm -f /var/EMPTY
dd if=/dev/zero of=/home/EMPTY bs=1M || echo "dd exit code $? is suppressed"
rm -f /home/EMPTY

# Block until the empty file has been removed, otherwise, Packer
# will try to kill the box while the disk is still full and that's bad
sync

echo "==> Disk usage before cleanup"
echo "${DISK_USAGE_BEFORE_CLEANUP}"

echo "==> Disk usage after cleanup"
df -h

%end

#-------------------------------------------------------------------------------
# END OF FILE
#-------------------------------------------------------------------------------
